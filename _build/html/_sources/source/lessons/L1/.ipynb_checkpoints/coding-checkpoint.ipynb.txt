{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Good coding practices- Hard coding and variables\n",
    "------------------------------------------------\n",
    "\n",
    "As we go through this tutorial, I will try to make a point to emphasize certain \"good coding practices\". In our [first program](first.ipynb), I've tried to use two such practices. First, to avoid hard coding and second using good names for your variables.\n",
    "\n",
    "#### Hard Coding\n",
    "\n",
    "Generally, hard coding is the practice of writing code without using variables appropriately. For example, we executed the following lines of code in the previous section: \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nSecondsInDay = 24 * 60 * 60\n",
    "print(nSecondsInDay)\n",
    "\n",
    "nSecondsInYear = nSecondsInDay * 365.25\n",
    "print(nSecondsInYear)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I could have written the lines above in a different way and achieved the same result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(24 * 60 * 60)\n",
    "\n",
    "nSecondsInYear = 24 * 60 * 60 * 325.25\n",
    "print(nSecondsInYear)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In second version, I printed the number of seconds in a day and then calculated the number of seconds in a year by performing the same calculation that I used in the previous line. The first version made use of the variable ``nSecondsInDay`` and thus avoided having multiple instances of the same calculation. Not only is this more efficient to code in the first place and more efficient for the computer itself, it is also easier to alter the code in the first example. Let's say I used this code at a planet where there were 25 hours per day instead of 24, in the first example, I would only have to alter the code in a single location as opposed to the 2 locations in the second example.\n",
    "\n",
    "#### Variable names\n",
    "\n",
    "Using good variable names should be obvious. Note that in the examples provided so far, I named my variables in such a way that they told me what they represent physically. Naturally, this practice makes it much easier to understand the code that you wrote. Not only will this help other users of your code, but your future self will thank you as well. Save single character variable names for counters, and that's about it.\n",
    "\n",
    "Example- bad variable names:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = 273.15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = 273.15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The variable `t` is hardly useful at all as we would have very little idea what that represents. Similarly `temp` could mean many things (and is often a good way to say \"temporary\".\n",
    "\n",
    "Instead, a good variable name is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temperature = 273.15"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "or"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temperatureCelcius = 273.15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is pretty clear that these values are temperatures. In the latter case, we even include the unit so there is little ambiguity in the information that should be held by that variable.\n",
    "\n",
    "Of course, there is some trade off between a good, descriptive variable name, and something that is so long it becomes a pain to use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temperaturecelciusduringthatonedaythaticareaboutalongtimeago = 273.15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The point of variables is to use them multiple times when performing calculations, so using a variable name that is very long can become cumbersome.\n",
    "\n",
    "**Variable name formatting**\n",
    "\n",
    "There are couple common options for formatting variable names. In python, it is popular to use camelCase, where the first letter of each word in a variable name is capitalized, with the exception of the first word:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numberSecondsInDay = 86400"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, some people prefer to pothole_case where underscores are used in place of spaces between different words:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "number_seconds_in_day = 86400"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other options abound but the important thing is to use descriptive variable names that are readable and to use a consistent style.\n",
    "\n",
    "There are several python keywords that can't be used as variable names. A few common examples: `for`, `True`, `False`, `and`, `if`, `int` all have special meaning in python and will cause an error if you try to assign a value to them."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
